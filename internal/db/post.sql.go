// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: post.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPost = `-- name: CreatePost :execresult
INSERT INTO
  posts (
    created_at,
    updated_at,
    feed_id,
    title,
    url,
    description,
    published_at
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?)
`

type CreatePostParams struct {
	CreatedAt   time.Time
	UpdatedAt   time.Time
	FeedID      int32
	Title       string
	Url         string
	Description sql.NullString
	PublishedAt time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPost,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FeedID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
	)
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT
  posts.id, posts.title, posts.description, posts.created_at, posts.updated_at, posts.published_at, posts.url, posts.feed_id
FROM
  posts
  JOIN feed_follows ON feed_follows.feed_id = posts.feed_id
WHERE
  feed_follows.user_id = ?
ORDER BY
  posts.published_at DESC
LIMIT
  ?
`

type GetPostsForUserParams struct {
	UserID string
	Limit  int32
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.Url,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
