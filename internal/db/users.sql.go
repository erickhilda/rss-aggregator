// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO
  users (id, email, created_at, updated_at, api_key)
VALUES
  (?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID        string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
	ApiKey    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ApiKey,
	)
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM users
WHERE
  id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, id)
}

const getUser = `-- name: GetUser :one
SELECT
  id,
  email,
  created_at,
  updated_at
FROM
  users
WHERE
  id = ?
`

type GetUserRow struct {
	ID        string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetUser(ctx context.Context, id string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByApiKey = `-- name: GetUserByApiKey :one
SELECT
  id,
  email,
  created_at,
  updated_at,
  api_key
FROM
  users
WHERE
  api_key = ?
`

func (q *Queries) GetUserByApiKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByApiKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id,
  email,
  created_at,
  updated_at
FROM
  users
ORDER BY
  id
LIMIT
  ?
`

type ListUsersRow struct {
	ID        string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListUsers(ctx context.Context, limit int32) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users
SET
  email = ?,
  updated_at = ?
WHERE
  id = ?
`

type UpdateUserParams struct {
	Email     string
	UpdatedAt time.Time
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser, arg.Email, arg.UpdatedAt, arg.ID)
}
