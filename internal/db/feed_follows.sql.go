// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: feed_follows.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createFeedFollow = `-- name: CreateFeedFollow :execresult
INSERT INTO
  feed_follows (created_at, updated_at, feed_id, user_id)
VALUES
  (?, ?, ?, ?)
`

type CreateFeedFollowParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    int32
	UserID    string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFeedFollow,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FeedID,
		arg.UserID,
	)
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM feed_follows
WHERE
  id = ?
  AND user_id = ?
`

type DeleteFeedFollowParams struct {
	ID     uint64
	UserID string
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.ID, arg.UserID)
	return err
}

const getFeedFollowByID = `-- name: GetFeedFollowByID :one
SELECT
  id, created_at, updated_at, user_id, feed_id
FROM
  feed_follows
WHERE
  id = ?
`

func (q *Queries) GetFeedFollowByID(ctx context.Context, id uint64) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, getFeedFollowByID, id)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFeedFollowsByUserID = `-- name: GetFeedFollowsByUserID :many
SELECT
  id, created_at, updated_at, user_id, feed_id
FROM
  feed_follows
WHERE
  user_id = ?
`

func (q *Queries) GetFeedFollowsByUserID(ctx context.Context, userID string) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
